// 타입스크립트 글로벌 설치
// npm install -g typescript

// solution.ts 실행 방법
// $npx ts-node solution.ts

// solution.ts -> solution.js
// $npx tsc solution.ts 

enum Ingredient {
  Bread = 1,
  Vegetable,
  Meat,
}

const correctHambuger: number[] = [Ingredient.Bread, Ingredient.Vegetable, Ingredient.Meat, Ingredient.Bread];

function make2Darray<T>(arr: T[], length: number): T[][] {
  let resultList: T[][]= [];

  arr.forEach((_, idx) => {
    // slice(start, end)
    resultList.push(arr.slice(idx, length + idx));
  })

  console.log(resultList)

  return resultList;
}

/*
const result = make2Darray<number>([1, 2, 3, 4, 5, 6, 7, 8], 2);
console.log(result);
[
  [ 1, 2 ], [ 2, 3 ],
  [ 3, 4 ], [ 4, 5 ],
  [ 5, 6 ], [ 6, 7 ],
  [ 7, 8 ], [ 8 ]
]

const result = make2Darray<number>([2,1,1,2,3,1,2,3,1], 4);
console.log(result);
[
  [ 2, 1, 1, 2 ],
  [ 1, 1, 2, 3 ],
  [ 1, 2, 3, 1 ],
  [ 2, 3, 1, 2 ],
  [ 3, 1, 2, 3 ],
  [ 1, 2, 3, 1 ],
  [ 2, 3, 1 ],
  [ 3, 1 ],
  [ 1 ]
]
*/


function matchArrayCount<T>(allArr:T[][], findArr: T[]): number {
  let resultCount = 0;

  allArr.forEach(arr => {
    if(
      arr.length === findArr.length && 
      arr.every((val, idx) => val === findArr[idx])
    ) {
      ++resultCount;
    }
  });

  return resultCount;
}

/*
const result = matchArrayCount<number>(
  [
    [ 2, 1, 1, 2 ],
    [ 1, 1, 2, 3 ],
    [ 1, 2, 3, 1 ], // match
    [ 2, 3, 1, 2 ],
    [ 3, 1, 2, 3 ],
    [ 1, 2, 3, 1 ], // match
    [ 2, 3, 1 ],
    [ 3, 1 ],
    [ 1 ]
  ],
  [1, 2, 3, 1]
);

console.log(result); // 2
*/


function solution(ingredient: number[]): number {
  let answer = 0;

  const madeBurgerList: number[][] = make2Darray<number>(ingredient, correctHambuger.length);

  answer = matchArrayCount<number>(madeBurgerList, correctHambuger);
  
  return answer;
}

const result = solution([1, 2, 3, 3, 2, 1, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 1, 3, 3, 1]);
console.log('result: ', result);

/*
[
  [ 1, 2, 3, 3 ], [ 2, 3, 3, 2 ],
  [ 3, 3, 2, 1 ], [ 3, 2, 1, 1 ],
  [ 2, 1, 1, 2 ], [ 1, 1, 2, 3 ],
  [ 1, 2, 3, 1 ], [ 2, 3, 1, 2 ],
  [ 3, 1, 2, 3 ], [ 1, 2, 3, 1 ],
  [ 2, 3, 1, 2 ], [ 3, 1, 2, 3 ],
  [ 1, 2, 3, 1 ], [ 2, 3, 1, 2 ],
  [ 3, 1, 2, 1 ], [ 1, 2, 1, 3 ],
  [ 2, 1, 3, 3 ], [ 1, 3, 3, 1 ],
  [ 3, 3, 1 ],    [ 3, 1 ],
  [ 1 ]
]
*/
